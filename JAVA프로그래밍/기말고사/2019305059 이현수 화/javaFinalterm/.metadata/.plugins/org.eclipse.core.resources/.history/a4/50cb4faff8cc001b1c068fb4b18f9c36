class CircularQueue {
    private int contents[], size;       // 큐의 내용, 크기
    private int head, tail;             // head와 tail
    private int count;                  // 큐 내에 있는 원소의 수

    public CircularQueue(int sz) {
        size = sz; 
        head = tail = 0;
        count = 0;
        contents = new int[size];
    }
    public synchronized int get() {
        int res;
        while (count == 0)
            try { wait();
            } catch (InterruptedException e) { }
        res = contents[tail];
        tail = (tail + 1) % size;
        count--;
        notifyAll();
        return res;
    }
    public synchronized void put(int value) { 
        while ( count == size ) 
            try { wait(); 
            } catch (InterruptedException e) { }
        contents[head] = value; 
            head = (head + 1) % size;
            count++;
            notifyAll();
        }
}

class Stack{
	private int stack[];
	int sp=0;
	
	Stack(int size){
		stack=new int[size];
	}
	
	public synchronized void put(int data) {
		if(sp==10) {
			System.out.println("stack is full");
		}
		else {
			stack[sp++]=data;
		}
	}
	
	public synchronized int get() {
		if(sp==0) {
			System.out.println("stack is empty");
			return Integer.MAX_VALUE;
		}
		else {
			return stack[--sp];
		}
	}
}

class Consumer extends Thread {
    private Stack boundedBuffer;

    public Consumer(Stack s, String name) {
        super("Consumer " + name);
        boundedBuffer = s;
    }
    public void run() {
        int value = 0;
        for (int i = 0; i < 10; i++) {
            value = boundedBuffer.get();
            System.out.println(getName() + " got: " + value);
        }
    }
}

class Producer extends Thread {
    private Stack boundedBuffer;

    public Producer(Stack s, String name) {
        super("Producer " + name);
        boundedBuffer = s;
    }

    public void run() {
        for (int i = 0; i < 10; i++) {
            boundedBuffer.put(i);
            System.out.println(getName() + " put: " + i);
            try {
                sleep((int)(Math.random() * 100));
            } catch (InterruptedException e) { }
        }
    }
}

public class prob3 {
    public static void main(String[] args) {
    	Stack s = new Stack(4);
    	
        Producer p1 = new Producer(s, "apple");
        Producer p2 = new Producer(s, "orange");
        Consumer c1 = new Consumer(s, "pear");
        Consumer c2 = new Consumer(s, "banana");
        
        p1.start();
        c1.start();
        p2.start();
        c2.start();
    }
}
